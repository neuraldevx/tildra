import os
import httpx
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Configuration
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_API_URL = "https://api.deepseek.com/chat/completions" # Replace with actual endpoint if different

# --- FastAPI App Setup ---
app = FastAPI(
    title="SnipSummary API",
    description="Provides summarization services for the SnipSummary extension and dashboard.",
    version="1.0.0"
)

# Configure CORS
origins = [
    "chrome-extension://*",  # Allow any Chrome extension (restrict in production)
    "http://localhost:3000",  # Allow Next.js dev server
    "null" # Allow local file testing for the extension popup
    # Add your frontend deployment URL here in production
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["POST"], # Only allow POST for the summarize endpoint
    allow_headers=["*"],
)

# --- Pydantic Models ---
class SummarizeRequest(BaseModel):
    article_text: str

class SummarizeResponse(BaseModel):
    tldr: str
    key_points: list[str]

# --- API Endpoints ---
@app.post("/summarize", response_model=SummarizeResponse)
async def summarize_article(request: SummarizeRequest):
    """
    Accepts article text and returns a TL;DR summary and key points
    generated by the DeepSeek API.
    """
    if not DEEPSEEK_API_KEY:
        raise HTTPException(status_code=500, detail="DeepSeek API key not configured on server.")

    if not request.article_text or not request.article_text.strip():
        raise HTTPException(status_code=400, detail="article_text cannot be empty.")

    # --- DeepSeek API Call ---
    try:
        prompt = f"""Summarize the following article in 3â€“5 sentences. Then, list 3 key points explaining why this article matters as a JSON object with keys 'tldr' and 'key_points' (a list of strings).

Article Text:
{request.article_text[:15000]} # Limit input text size for safety/cost

Respond ONLY with the JSON object.""" # Ensure only JSON is returned

        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": "deepseek-chat", # Use the appropriate DeepSeek model name
            "messages": [
                {"role": "system", "content": "You are an expert summarizer. Respond only with the requested JSON object."},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.7,
            "response_format": { "type": "json_object" } # Request JSON output
        }

        async with httpx.AsyncClient(timeout=60.0) as client: # Increased timeout for potentially long summaries
            response = await client.post(DEEPSEEK_API_URL, headers=headers, json=payload)
            response.raise_for_status() # Raise exception for bad status codes (4xx or 5xx)

            api_response = response.json()

            # --- Process DeepSeek Response ---
            # Extract the JSON content from the response
            # Adjust based on the actual structure of the DeepSeek API response
            if not api_response.get('choices') or not api_response['choices'][0].get('message') or not api_response['choices'][0]['message'].get('content'):
                 raise HTTPException(status_code=500, detail="Invalid response structure from DeepSeek API.")

            summary_content_str = api_response['choices'][0]['message']['content']

            # Attempt to parse the JSON string within the content
            try:
                import json
                summary_data = json.loads(summary_content_str)
                if 'tldr' not in summary_data or 'key_points' not in summary_data:
                     raise ValueError("Missing 'tldr' or 'key_points' in DeepSeek response JSON.")
                if not isinstance(summary_data['key_points'], list):
                     raise ValueError("'key_points' must be a list in DeepSeek response JSON.")

                # Validate list items are strings
                if not all(isinstance(item, str) for item in summary_data['key_points']):
                     raise ValueError("All items in 'key_points' must be strings.")

            except (json.JSONDecodeError, ValueError) as json_err:
                print(f"Error parsing DeepSeek JSON response: {json_err}")
                print(f"Raw response content: {summary_content_str}")
                raise HTTPException(status_code=500, detail=f"Could not parse summary JSON from DeepSeek: {json_err}")


            # Return the structured response
            return SummarizeResponse(
                tldr=summary_data['tldr'],
                key_points=summary_data['key_points']
            )

    except httpx.RequestError as exc:
        print(f"An error occurred while requesting {exc.request.url!r}: {exc}")
        raise HTTPException(status_code=503, detail=f"Could not connect to DeepSeek API: {exc}")
    except httpx.HTTPStatusError as exc:
        print(f"Error response {exc.response.status_code} while requesting {exc.request.url!r}: {exc.response.text}")
        raise HTTPException(status_code=exc.response.status_code, detail=f"DeepSeek API returned an error: {exc.response.text}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        raise HTTPException(status_code=500, detail=f"An internal server error occurred: {e}")


# --- Health Check Endpoint ---
@app.get("/health")
def health_check():
    return {"status": "ok"}

# --- Run Instruction (for local development) ---
if __name__ == "__main__":
    import uvicorn
    print("Starting FastAPI server on http://localhost:8000")
    print("Ensure DEEPSEEK_API_KEY is set in your .env file.")
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True) 